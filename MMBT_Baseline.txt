[32m2021-12-12T09:53:14 | mmf.utils.configuration: [0mOverriding option config to projects/hateful_memes/configs/mmbt/defaults.yaml
[32m2021-12-12T09:53:14 | mmf.utils.configuration: [0mOverriding option model to mmbt
[32m2021-12-12T09:53:14 | mmf.utils.configuration: [0mOverriding option datasets to hateful_memes
[32m2021-12-12T09:53:14 | mmf.utils.configuration: [0mOverriding option training.max_updates to 5000
[32m2021-12-12T09:53:14 | mmf: [0mLogging to: ./save/train.log
[32m2021-12-12T09:53:14 | mmf_cli.run: [0mNamespace(config_override=None, local_rank=None, opts=['config=projects/hateful_memes/configs/mmbt/defaults.yaml', 'model=mmbt', 'dataset=hateful_memes', 'training.max_updates=5000'])
[32m2021-12-12T09:53:14 | mmf_cli.run: [0mTorch version: 1.9.0+cu102
[32m2021-12-12T09:53:14 | mmf.utils.general: [0mCUDA Device 0 is: Tesla V100-SXM2-32GB
[32m2021-12-12T09:53:14 | mmf_cli.run: [0mUsing seed 14869642
[32m2021-12-12T09:53:14 | mmf.trainers.mmf_trainer: [0mLoading datasets
[32m2021-12-12T09:53:15 | mmf.datasets.multi_datamodule: [0mMultitasking disabled by default for single dataset training
[32m2021-12-12T09:53:15 | mmf.datasets.multi_datamodule: [0mMultitasking disabled by default for single dataset training
[32m2021-12-12T09:53:15 | mmf.datasets.multi_datamodule: [0mMultitasking disabled by default for single dataset training
[32m2021-12-12T09:53:15 | mmf.trainers.mmf_trainer: [0mLoading model
[32m2021-12-12T09:53:22 | mmf.trainers.mmf_trainer: [0mLoading optimizer
[32m2021-12-12T09:53:22 | mmf.trainers.mmf_trainer: [0mLoading metrics
[32m2021-12-12T09:53:22 | mmf.trainers.mmf_trainer: [0m===== Model =====
[32m2021-12-12T09:53:22 | mmf.trainers.mmf_trainer: [0mMMBT(
  (model): MMBTForClassification(
    (bert): MMBTBase(
      (mmbt): MMBTModel(
        (transformer): BertModelJit(
          (embeddings): BertEmbeddingsJit(
            (word_embeddings): Embedding(30522, 768, padding_idx=0)
            (position_embeddings): Embedding(512, 768)
            (token_type_embeddings): Embedding(2, 768)
            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
            (dropout): Dropout(p=0.1, inplace=False)
          )
          (encoder): BertEncoderJit(
            (layer): ModuleList(
              (0): BertLayerJit(
                (attention): BertAttentionJit(
                  (self): BertSelfAttentionJit(
                    (query): Linear(in_features=768, out_features=768, bias=True)
                    (key): Linear(in_features=768, out_features=768, bias=True)
                    (value): Linear(in_features=768, out_features=768, bias=True)
                    (dropout): Dropout(p=0.1, inplace=False)
                  )
                  (output): BertSelfOutput(
                    (dense): Linear(in_features=768, out_features=768, bias=True)
                    (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
                    (dropout): Dropout(p=0.1, inplace=False)
                  )
                )
                (intermediate): BertIntermediate(
                  (dense): Linear(in_features=768, out_features=3072, bias=True)
                )
                (output): BertOutput(
                  (dense): Linear(in_features=3072, out_features=768, bias=True)
                  (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1, inplace=False)
                )
              )
              (1): BertLayerJit(
                (attention): BertAttentionJit(
                  (self): BertSelfAttentionJit(
                    (query): Linear(in_features=768, out_features=768, bias=True)
                    (key): Linear(in_features=768, out_features=768, bias=True)
                    (value): Linear(in_features=768, out_features=768, bias=True)
                    (dropout): Dropout(p=0.1, inplace=False)
                  )
                  (output): BertSelfOutput(
                    (dense): Linear(in_features=768, out_features=768, bias=True)
                    (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
                    (dropout): Dropout(p=0.1, inplace=False)
                  )
                )
                (intermediate): BertIntermediate(
                  (dense): Linear(in_features=768, out_features=3072, bias=True)
                )
                (output): BertOutput(
                  (dense): Linear(in_features=3072, out_features=768, bias=True)
                  (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1, inplace=False)
                )
              )
              (2): BertLayerJit(
                (attention): BertAttentionJit(
                  (self): BertSelfAttentionJit(
                    (query): Linear(in_features=768, out_features=768, bias=True)
                    (key): Linear(in_features=768, out_features=768, bias=True)
                    (value): Linear(in_features=768, out_features=768, bias=True)
                    (dropout): Dropout(p=0.1, inplace=False)
                  )
                  (output): BertSelfOutput(
                    (dense): Linear(in_features=768, out_features=768, bias=True)
                    (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
                    (dropout): Dropout(p=0.1, inplace=False)
                  )
                )
                (intermediate): BertIntermediate(
                  (dense): Linear(in_features=768, out_features=3072, bias=True)
                )
                (output): BertOutput(
                  (dense): Linear(in_features=3072, out_features=768, bias=True)
                  (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1, inplace=False)
                )
              )
              (3): BertLayerJit(
                (attention): BertAttentionJit(
                  (self): BertSelfAttentionJit(
                    (query): Linear(in_features=768, out_features=768, bias=True)
                    (key): Linear(in_features=768, out_features=768, bias=True)
                    (value): Linear(in_features=768, out_features=768, bias=True)
                    (dropout): Dropout(p=0.1, inplace=False)
                  )
                  (output): BertSelfOutput(
                    (dense): Linear(in_features=768, out_features=768, bias=True)
                    (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
                    (dropout): Dropout(p=0.1, inplace=False)
                  )
                )
                (intermediate): BertIntermediate(
                  (dense): Linear(in_features=768, out_features=3072, bias=True)
                )
                (output): BertOutput(
                  (dense): Linear(in_features=3072, out_features=768, bias=True)
                  (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1, inplace=False)
                )
              )
              (4): BertLayerJit(
                (attention): BertAttentionJit(
                  (self): BertSelfAttentionJit(
                    (query): Linear(in_features=768, out_features=768, bias=True)
                    (key): Linear(in_features=768, out_features=768, bias=True)
                    (value): Linear(in_features=768, out_features=768, bias=True)
                    (dropout): Dropout(p=0.1, inplace=False)
                  )
                  (output): BertSelfOutput(
                    (dense): Linear(in_features=768, out_features=768, bias=True)
                    (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
                    (dropout): Dropout(p=0.1, inplace=False)
                  )
                )
                (intermediate): BertIntermediate(
                  (dense): Linear(in_features=768, out_features=3072, bias=True)
                )
                (output): BertOutput(
                  (dense): Linear(in_features=3072, out_features=768, bias=True)
                  (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1, inplace=False)
                )
              )
              (5): BertLayerJit(
                (attention): BertAttentionJit(
                  (self): BertSelfAttentionJit(
                    (query): Linear(in_features=768, out_features=768, bias=True)
                    (key): Linear(in_features=768, out_features=768, bias=True)
                    (value): Linear(in_features=768, out_features=768, bias=True)
                    (dropout): Dropout(p=0.1, inplace=False)
                  )
                  (output): BertSelfOutput(
                    (dense): Linear(in_features=768, out_features=768, bias=True)
                    (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
                    (dropout): Dropout(p=0.1, inplace=False)
                  )
                )
                (intermediate): BertIntermediate(
                  (dense): Linear(in_features=768, out_features=3072, bias=True)
                )
                (output): BertOutput(
                  (dense): Linear(in_features=3072, out_features=768, bias=True)
                  (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1, inplace=False)
                )
              )
              (6): BertLayerJit(
                (attention): BertAttentionJit(
                  (self): BertSelfAttentionJit(
                    (query): Linear(in_features=768, out_features=768, bias=True)
                    (key): Linear(in_features=768, out_features=768, bias=True)
                    (value): Linear(in_features=768, out_features=768, bias=True)
                    (dropout): Dropout(p=0.1, inplace=False)
                  )
                  (output): BertSelfOutput(
                    (dense): Linear(in_features=768, out_features=768, bias=True)
                    (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
                    (dropout): Dropout(p=0.1, inplace=False)
                  )
                )
                (intermediate): BertIntermediate(
                  (dense): Linear(in_features=768, out_features=3072, bias=True)
                )
                (output): BertOutput(
                  (dense): Linear(in_features=3072, out_features=768, bias=True)
                  (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1, inplace=False)
                )
              )
              (7): BertLayerJit(
                (attention): BertAttentionJit(
                  (self): BertSelfAttentionJit(
                    (query): Linear(in_features=768, out_features=768, bias=True)
                    (key): Linear(in_features=768, out_features=768, bias=True)
                    (value): Linear(in_features=768, out_features=768, bias=True)
                    (dropout): Dropout(p=0.1, inplace=False)
                  )
                  (output): BertSelfOutput(
                    (dense): Linear(in_features=768, out_features=768, bias=True)
                    (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
                    (dropout): Dropout(p=0.1, inplace=False)
                  )
                )
                (intermediate): BertIntermediate(
                  (dense): Linear(in_features=768, out_features=3072, bias=True)
                )
                (output): BertOutput(
                  (dense): Linear(in_features=3072, out_features=768, bias=True)
                  (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1, inplace=False)
                )
              )
              (8): BertLayerJit(
                (attention): BertAttentionJit(
                  (self): BertSelfAttentionJit(
                    (query): Linear(in_features=768, out_features=768, bias=True)
                    (key): Linear(in_features=768, out_features=768, bias=True)
                    (value): Linear(in_features=768, out_features=768, bias=True)
                    (dropout): Dropout(p=0.1, inplace=False)
                  )
                  (output): BertSelfOutput(
                    (dense): Linear(in_features=768, out_features=768, bias=True)
                    (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
                    (dropout): Dropout(p=0.1, inplace=False)
                  )
                )
                (intermediate): BertIntermediate(
                  (dense): Linear(in_features=768, out_features=3072, bias=True)
                )
                (output): BertOutput(
                  (dense): Linear(in_features=3072, out_features=768, bias=True)
                  (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1, inplace=False)
                )
              )
              (9): BertLayerJit(
                (attention): BertAttentionJit(
                  (self): BertSelfAttentionJit(
                    (query): Linear(in_features=768, out_features=768, bias=True)
                    (key): Linear(in_features=768, out_features=768, bias=True)
                    (value): Linear(in_features=768, out_features=768, bias=True)
                    (dropout): Dropout(p=0.1, inplace=False)
                  )
                  (output): BertSelfOutput(
                    (dense): Linear(in_features=768, out_features=768, bias=True)
                    (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
                    (dropout): Dropout(p=0.1, inplace=False)
                  )
                )
                (intermediate): BertIntermediate(
                  (dense): Linear(in_features=768, out_features=3072, bias=True)
                )
                (output): BertOutput(
                  (dense): Linear(in_features=3072, out_features=768, bias=True)
                  (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1, inplace=False)
                )
              )
              (10): BertLayerJit(
                (attention): BertAttentionJit(
                  (self): BertSelfAttentionJit(
                    (query): Linear(in_features=768, out_features=768, bias=True)
                    (key): Linear(in_features=768, out_features=768, bias=True)
                    (value): Linear(in_features=768, out_features=768, bias=True)
                    (dropout): Dropout(p=0.1, inplace=False)
                  )
                  (output): BertSelfOutput(
                    (dense): Linear(in_features=768, out_features=768, bias=True)
                    (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
                    (dropout): Dropout(p=0.1, inplace=False)
                  )
                )
                (intermediate): BertIntermediate(
                  (dense): Linear(in_features=768, out_features=3072, bias=True)
                )
                (output): BertOutput(
                  (dense): Linear(in_features=3072, out_features=768, bias=True)
                  (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1, inplace=False)
                )
              )
              (11): BertLayerJit(
                (attention): BertAttentionJit(
                  (self): BertSelfAttentionJit(
                    (query): Linear(in_features=768, out_features=768, bias=True)
                    (key): Linear(in_features=768, out_features=768, bias=True)
                    (value): Linear(in_features=768, out_features=768, bias=True)
                    (dropout): Dropout(p=0.1, inplace=False)
                  )
                  (output): BertSelfOutput(
                    (dense): Linear(in_features=768, out_features=768, bias=True)
                    (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
                    (dropout): Dropout(p=0.1, inplace=False)
                  )
                )
                (intermediate): BertIntermediate(
                  (dense): Linear(in_features=768, out_features=3072, bias=True)
                )
                (output): BertOutput(
                  (dense): Linear(in_features=3072, out_features=768, bias=True)
                  (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1, inplace=False)
                )
              )
            )
          )
          (pooler): BertPooler(
            (dense): Linear(in_features=768, out_features=768, bias=True)
            (activation): Tanh()
          )
        )
        (modal_encoder): ModalEmbeddings(
          (encoder): ResNet152ImageEncoder(
            (model): Sequential(
              (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (4): Sequential(
                (0): Bottleneck(
                  (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                  (downsample): Sequential(
                    (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                )
                (1): Bottleneck(
                  (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (2): Bottleneck(
                  (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
              )
              (5): Sequential(
                (0): Bottleneck(
                  (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                  (downsample): Sequential(
                    (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                )
                (1): Bottleneck(
                  (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (2): Bottleneck(
                  (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (3): Bottleneck(
                  (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (4): Bottleneck(
                  (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (5): Bottleneck(
                  (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (6): Bottleneck(
                  (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (7): Bottleneck(
                  (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
              )
              (6): Sequential(
                (0): Bottleneck(
                  (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                  (downsample): Sequential(
                    (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
                    (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                )
                (1): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (2): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (3): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (4): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (5): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (6): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (7): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (8): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (9): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (10): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (11): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (12): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (13): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (14): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (15): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (16): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (17): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (18): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (19): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (20): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (21): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (22): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (23): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (24): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (25): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (26): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (27): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (28): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (29): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (30): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (31): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (32): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (33): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (34): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (35): Bottleneck(
                  (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
              )
              (7): Sequential(
                (0): Bottleneck(
                  (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                  (downsample): Sequential(
                    (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
                    (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                )
                (1): Bottleneck(
                  (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
                (2): Bottleneck(
                  (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                )
              )
            )
            (pool): AdaptiveAvgPool2d(output_size=(1, 1))
          )
          (proj_embeddings): Linear(in_features=2048, out_features=768, bias=True)
          (position_embeddings): Embedding(512, 768)
          (token_type_embeddings): Embedding(2, 768)
          (word_embeddings): Embedding(30522, 768, padding_idx=0)
          (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
          (dropout): Dropout(p=0.1, inplace=False)
        )
      )
    )
    (dropout): Dropout(p=0.1, inplace=False)
    (classifier): Sequential(
      (0): BertPredictionHeadTransform(
        (dense): Linear(in_features=768, out_features=768, bias=True)
        (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
      )
      (1): Linear(in_features=768, out_features=2, bias=True)
    )
  )
  (losses): Losses(
    (losses): ModuleList(
      (0): MMFLoss(
        (loss_criterion): CrossEntropyLoss(
          (loss_fn): CrossEntropyLoss()
        )
      )
    )
  )
)
[32m2021-12-12T09:53:22 | mmf.utils.general: [0mTotal Parameters: 169793346. Trained Parameters: 169793346
[32m2021-12-12T09:53:22 | mmf.trainers.core.training_loop: [0mStarting training...
[5m[31mWARNING[0m [32m2021-12-12T09:53:23 | py.warnings: [0m/home/tiger/zhao.yan/envs/py3mmf/lib/python3.7/site-packages/torch/nn/functional.py:718: UserWarning: Named tensors and all their associated APIs are an experimental feature and subject to change. Please do not use them for anything important until they are released as stable. (Triggered internally at  /pytorch/c10/core/TensorImpl.h:1156.)
  return torch.max_pool2d(input, kernel_size, stride, padding, dilation, ceil_mode)

[5m[31mWARNING[0m [32m2021-12-12T09:53:23 | py.warnings: [0m/home/tiger/zhao.yan/envs/py3mmf/lib/python3.7/site-packages/torch/nn/functional.py:718: UserWarning: Named tensors and all their associated APIs are an experimental feature and subject to change. Please do not use them for anything important until they are released as stable. (Triggered internally at  /pytorch/c10/core/TensorImpl.h:1156.)
  return torch.max_pool2d(input, kernel_size, stride, padding, dilation, ceil_mode)

[32m2021-12-12T09:54:20 | mmf.trainers.callbacks.logistics: [0mprogress: 100/5000, train/hateful_memes/cross_entropy: 0.6809, train/hateful_memes/cross_entropy/avg: 0.6809, train/total_loss: 0.6809, train/total_loss/avg: 0.6809, max mem: 11656.0, experiment: run, epoch: 1, num_updates: 100, iterations: 100, max_updates: 5000, lr: 0., ups: 1.75, time: 57s 561ms, time_since_start: 57s 576ms, eta: 47m 48s 459ms
[32m2021-12-12T09:55:16 | mmf.trainers.callbacks.logistics: [0mprogress: 200/5000, train/hateful_memes/cross_entropy: 0.6099, train/hateful_memes/cross_entropy/avg: 0.6454, train/total_loss: 0.6099, train/total_loss/avg: 0.6454, max mem: 11656.0, experiment: run, epoch: 1, num_updates: 200, iterations: 200, max_updates: 5000, lr: 0., ups: 1.79, time: 56s 480ms, time_since_start: 01m 54s 057ms, eta: 45m 57s 147ms
[32m2021-12-12T09:56:13 | mmf.trainers.callbacks.logistics: [0mprogress: 300/5000, train/hateful_memes/cross_entropy: 0.6200, train/hateful_memes/cross_entropy/avg: 0.6369, train/total_loss: 0.6200, train/total_loss/avg: 0.6369, max mem: 11656.0, experiment: run, epoch: 2, num_updates: 300, iterations: 300, max_updates: 5000, lr: 0., ups: 1.79, time: 56s 660ms, time_since_start: 02m 50s 717ms, eta: 45m 08s 318ms
[32m2021-12-12T09:57:10 | mmf.trainers.callbacks.logistics: [0mprogress: 400/5000, train/hateful_memes/cross_entropy: 0.6200, train/hateful_memes/cross_entropy/avg: 0.6642, train/total_loss: 0.6200, train/total_loss/avg: 0.6642, max mem: 11656.0, experiment: run, epoch: 2, num_updates: 400, iterations: 400, max_updates: 5000, lr: 0., ups: 1.79, time: 56s 502ms, time_since_start: 03m 47s 220ms, eta: 44m 03s 288ms
[32m2021-12-12T09:58:06 | mmf.trainers.callbacks.logistics: [0mprogress: 500/5000, train/hateful_memes/cross_entropy: 0.6766, train/hateful_memes/cross_entropy/avg: 0.6667, train/total_loss: 0.6766, train/total_loss/avg: 0.6667, max mem: 11656.0, experiment: run, epoch: 2, num_updates: 500, iterations: 500, max_updates: 5000, lr: 0., ups: 1.79, time: 56s 840ms, time_since_start: 04m 44s 061ms, eta: 43m 21s 327ms
[32m2021-12-12T09:59:04 | mmf.trainers.callbacks.logistics: [0mprogress: 600/5000, train/hateful_memes/cross_entropy: 0.6353, train/hateful_memes/cross_entropy/avg: 0.6615, train/total_loss: 0.6353, train/total_loss/avg: 0.6615, max mem: 11656.0, experiment: run, epoch: 3, num_updates: 600, iterations: 600, max_updates: 5000, lr: 0., ups: 1.75, time: 57s 082ms, time_since_start: 05m 41s 143ms, eta: 42m 34s 336ms
[32m2021-12-12T10:00:00 | mmf.trainers.callbacks.logistics: [0mprogress: 700/5000, train/hateful_memes/cross_entropy: 0.6353, train/hateful_memes/cross_entropy/avg: 0.6487, train/total_loss: 0.6353, train/total_loss/avg: 0.6487, max mem: 11656.0, experiment: run, epoch: 3, num_updates: 700, iterations: 700, max_updates: 5000, lr: 0., ups: 1.79, time: 56s 709ms, time_since_start: 06m 37s 853ms, eta: 41m 19s 984ms
[32m2021-12-12T10:00:57 | mmf.trainers.callbacks.logistics: [0mprogress: 800/5000, train/hateful_memes/cross_entropy: 0.6200, train/hateful_memes/cross_entropy/avg: 0.6334, train/total_loss: 0.6200, train/total_loss/avg: 0.6334, max mem: 11656.0, experiment: run, epoch: 4, num_updates: 800, iterations: 800, max_updates: 5000, lr: 0., ups: 1.79, time: 56s 847ms, time_since_start: 07m 34s 701ms, eta: 40m 28s 205ms
[32m2021-12-12T10:01:54 | mmf.trainers.callbacks.logistics: [0mprogress: 900/5000, train/hateful_memes/cross_entropy: 0.6200, train/hateful_memes/cross_entropy/avg: 0.6124, train/total_loss: 0.6200, train/total_loss/avg: 0.6124, max mem: 11656.0, experiment: run, epoch: 4, num_updates: 900, iterations: 900, max_updates: 5000, lr: 0., ups: 1.79, time: 56s 599ms, time_since_start: 08m 31s 301ms, eta: 39m 20s 016ms
[32m2021-12-12T10:02:50 | mmf.trainers.callbacks.checkpoint: [0mCheckpoint time. Saving a checkpoint.
[32m2021-12-12T10:02:50 | mmf.utils.checkpoint: [0mCheckpoint save operation started!
[32m2021-12-12T10:02:54 | mmf.utils.checkpoint: [0mSaving current checkpoint
[32m2021-12-12T10:02:58 | mmf.utils.checkpoint: [0mCheckpoint save operation finished!
[32m2021-12-12T10:02:58 | mmf.trainers.callbacks.logistics: [0mprogress: 1000/5000, train/hateful_memes/cross_entropy: 0.6099, train/hateful_memes/cross_entropy/avg: 0.5903, train/total_loss: 0.6099, train/total_loss/avg: 0.5903, max mem: 11656.0, experiment: run, epoch: 4, num_updates: 1000, iterations: 1000, max_updates: 5000, lr: 0.00001, ups: 1.56, time: 01m 04s 360ms, time_since_start: 09m 35s 662ms, eta: 43m 38s 201ms
[32m2021-12-12T10:02:58 | mmf.trainers.core.training_loop: [0mEvaluation time. Running on full validation set...
[32m2021-12-12T10:02:58 | mmf.common.test_reporter: [0mPredicting for hateful_memes
[32m2021-12-12T10:03:02 | mmf.trainers.core.evaluation_loop: [0mFinished training. Loaded 17
[32m2021-12-12T10:03:02 | mmf.trainers.core.evaluation_loop: [0m -- skipped 0 batches.
[32m2021-12-12T10:03:02 | mmf.utils.checkpoint: [0mCheckpoint save operation started!
[32m2021-12-12T10:03:07 | mmf.utils.checkpoint: [0mSaving best checkpoint
[32m2021-12-12T10:03:11 | mmf.utils.checkpoint: [0mSaving current checkpoint
[32m2021-12-12T10:03:16 | mmf.utils.checkpoint: [0mCheckpoint save operation finished!
[32m2021-12-12T10:03:16 | mmf.trainers.callbacks.logistics: [0mprogress: 1000/5000, val/hateful_memes/cross_entropy: 0.6908, val/total_loss: 0.6908, val/hateful_memes/accuracy: 0.6130, val/hateful_memes/binary_f1: 0.3489, val/hateful_memes/roc_auc: 0.6169, num_updates: 1000, epoch: 4, iterations: 1000, max_updates: 5000, val_time: 17s 893ms, best_update: 1000, best_iteration: 1000, best_val/hateful_memes/roc_auc: 0.616868
[32m2021-12-12T10:04:13 | mmf.trainers.callbacks.logistics: [0mprogress: 1100/5000, train/hateful_memes/cross_entropy: 0.6099, train/hateful_memes/cross_entropy/avg: 0.5690, train/total_loss: 0.6099, train/total_loss/avg: 0.5690, max mem: 11667.0, experiment: run, epoch: 5, num_updates: 1100, iterations: 1100, max_updates: 5000, lr: 0.00001, ups: 1.75, time: 57s 263ms, time_since_start: 10m 50s 820ms, eta: 37m 51s 248ms
[32m2021-12-12T10:05:10 | mmf.trainers.callbacks.logistics: [0mprogress: 1200/5000, train/hateful_memes/cross_entropy: 0.5722, train/hateful_memes/cross_entropy/avg: 0.5622, train/total_loss: 0.5722, train/total_loss/avg: 0.5622, max mem: 11667.0, experiment: run, epoch: 5, num_updates: 1200, iterations: 1200, max_updates: 5000, lr: 0.00001, ups: 1.79, time: 56s 543ms, time_since_start: 11m 47s 364ms, eta: 36m 25s 199ms
[32m2021-12-12T10:06:06 | mmf.trainers.callbacks.logistics: [0mprogress: 1300/5000, train/hateful_memes/cross_entropy: 0.5722, train/hateful_memes/cross_entropy/avg: 0.5478, train/total_loss: 0.5722, train/total_loss/avg: 0.5478, max mem: 11667.0, experiment: run, epoch: 5, num_updates: 1300, iterations: 1300, max_updates: 5000, lr: 0.00001, ups: 1.79, time: 56s 540ms, time_since_start: 12m 43s 904ms, eta: 35m 27s 564ms
[32m2021-12-12T10:07:03 | mmf.trainers.callbacks.logistics: [0mprogress: 1400/5000, train/hateful_memes/cross_entropy: 0.5263, train/hateful_memes/cross_entropy/avg: 0.5199, train/total_loss: 0.5263, train/total_loss/avg: 0.5199, max mem: 11667.0, experiment: run, epoch: 6, num_updates: 1400, iterations: 1400, max_updates: 5000, lr: 0.00001, ups: 1.79, time: 56s 854ms, time_since_start: 13m 40s 758ms, eta: 34m 41s 543ms
[32m2021-12-12T10:08:00 | mmf.trainers.callbacks.logistics: [0mprogress: 1500/5000, train/hateful_memes/cross_entropy: 0.5263, train/hateful_memes/cross_entropy/avg: 0.5007, train/total_loss: 0.5263, train/total_loss/avg: 0.5007, max mem: 11667.0, experiment: run, epoch: 6, num_updates: 1500, iterations: 1500, max_updates: 5000, lr: 0.00001, ups: 1.79, time: 56s 710ms, time_since_start: 14m 37s 469ms, eta: 33m 38s 612ms
[32m2021-12-12T10:08:57 | mmf.trainers.callbacks.logistics: [0mprogress: 1600/5000, train/hateful_memes/cross_entropy: 0.4866, train/hateful_memes/cross_entropy/avg: 0.4842, train/total_loss: 0.4866, train/total_loss/avg: 0.4842, max mem: 11667.0, experiment: run, epoch: 7, num_updates: 1600, iterations: 1600, max_updates: 5000, lr: 0.00001, ups: 1.75, time: 57s 012ms, time_since_start: 15m 34s 481ms, eta: 32m 51s 367ms
[32m2021-12-12T10:09:54 | mmf.trainers.callbacks.logistics: [0mprogress: 1700/5000, train/hateful_memes/cross_entropy: 0.4866, train/hateful_memes/cross_entropy/avg: 0.4618, train/total_loss: 0.4866, train/total_loss/avg: 0.4618, max mem: 11667.0, experiment: run, epoch: 7, num_updates: 1700, iterations: 1700, max_updates: 5000, lr: 0.00001, ups: 1.79, time: 56s 753ms, time_since_start: 16m 31s 235ms, eta: 31m 44s 700ms
[32m2021-12-12T10:10:50 | mmf.trainers.callbacks.logistics: [0mprogress: 1800/5000, train/hateful_memes/cross_entropy: 0.4440, train/hateful_memes/cross_entropy/avg: 0.4455, train/total_loss: 0.4440, train/total_loss/avg: 0.4455, max mem: 11667.0, experiment: run, epoch: 7, num_updates: 1800, iterations: 1800, max_updates: 5000, lr: 0.00001, ups: 1.79, time: 56s 672ms, time_since_start: 17m 27s 907ms, eta: 30m 44s 345ms
[32m2021-12-12T10:11:47 | mmf.trainers.callbacks.logistics: [0mprogress: 1900/5000, train/hateful_memes/cross_entropy: 0.4440, train/hateful_memes/cross_entropy/avg: 0.4254, train/total_loss: 0.4440, train/total_loss/avg: 0.4254, max mem: 11667.0, experiment: run, epoch: 8, num_updates: 1900, iterations: 1900, max_updates: 5000, lr: 0.00001, ups: 1.75, time: 57s 012ms, time_since_start: 18m 24s 920ms, eta: 29m 57s 435ms
[32m2021-12-12T10:12:44 | mmf.trainers.callbacks.checkpoint: [0mCheckpoint time. Saving a checkpoint.
[32m2021-12-12T10:12:44 | mmf.utils.checkpoint: [0mCheckpoint save operation started!
[32m2021-12-12T10:12:49 | mmf.utils.checkpoint: [0mSaving current checkpoint
[32m2021-12-12T10:12:53 | mmf.utils.checkpoint: [0mCheckpoint save operation finished!
[32m2021-12-12T10:12:53 | mmf.trainers.callbacks.logistics: [0mprogress: 2000/5000, train/hateful_memes/cross_entropy: 0.3921, train/hateful_memes/cross_entropy/avg: 0.4148, train/total_loss: 0.3921, train/total_loss/avg: 0.4148, max mem: 11667.0, experiment: run, epoch: 8, num_updates: 2000, iterations: 2000, max_updates: 5000, lr: 0.00001, ups: 1.52, time: 01m 06s 101ms, time_since_start: 19m 31s 021ms, eta: 33m 36s 749ms
[32m2021-12-12T10:12:53 | mmf.trainers.core.training_loop: [0mEvaluation time. Running on full validation set...
[32m2021-12-12T10:12:53 | mmf.common.test_reporter: [0mPredicting for hateful_memes
[32m2021-12-12T10:12:57 | mmf.trainers.core.evaluation_loop: [0mFinished training. Loaded 17
[32m2021-12-12T10:12:57 | mmf.trainers.core.evaluation_loop: [0m -- skipped 0 batches.
[32m2021-12-12T10:12:57 | mmf.utils.checkpoint: [0mCheckpoint save operation started!
[32m2021-12-12T10:13:02 | mmf.utils.checkpoint: [0mSaving current checkpoint
[32m2021-12-12T10:13:07 | mmf.utils.checkpoint: [0mCheckpoint save operation finished!
[32m2021-12-12T10:13:07 | mmf.trainers.callbacks.logistics: [0mprogress: 2000/5000, val/hateful_memes/cross_entropy: 1.2992, val/total_loss: 1.2992, val/hateful_memes/accuracy: 0.6352, val/hateful_memes/binary_f1: 0.2213, val/hateful_memes/roc_auc: 0.6036, num_updates: 2000, epoch: 8, iterations: 2000, max_updates: 5000, val_time: 13s 112ms, best_update: 1000, best_iteration: 1000, best_val/hateful_memes/roc_auc: 0.616868
[32m2021-12-12T10:14:04 | mmf.trainers.callbacks.logistics: [0mprogress: 2100/5000, train/hateful_memes/cross_entropy: 0.3755, train/hateful_memes/cross_entropy/avg: 0.4052, train/total_loss: 0.3755, train/total_loss/avg: 0.4052, max mem: 11667.0, experiment: run, epoch: 8, num_updates: 2100, iterations: 2100, max_updates: 5000, lr: 0.00001, ups: 1.75, time: 57s 213ms, time_since_start: 20m 41s 348ms, eta: 28m 07s 384ms
[32m2021-12-12T10:15:01 | mmf.trainers.callbacks.logistics: [0mprogress: 2200/5000, train/hateful_memes/cross_entropy: 0.3559, train/hateful_memes/cross_entropy/avg: 0.3924, train/total_loss: 0.3559, train/total_loss/avg: 0.3924, max mem: 11667.0, experiment: run, epoch: 9, num_updates: 2200, iterations: 2200, max_updates: 5000, lr: 0.00001, ups: 1.79, time: 56s 915ms, time_since_start: 21m 38s 263ms, eta: 27m 732ms
[32m2021-12-12T10:15:57 | mmf.trainers.callbacks.logistics: [0mprogress: 2300/5000, train/hateful_memes/cross_entropy: 0.3109, train/hateful_memes/cross_entropy/avg: 0.3889, train/total_loss: 0.3109, train/total_loss/avg: 0.3889, max mem: 11667.0, experiment: run, epoch: 9, num_updates: 2300, iterations: 2300, max_updates: 5000, lr: 0.00001, ups: 1.79, time: 56s 668ms, time_since_start: 22m 34s 932ms, eta: 25m 56s 073ms
[32m2021-12-12T10:16:54 | mmf.trainers.callbacks.logistics: [0mprogress: 2400/5000, train/hateful_memes/cross_entropy: 0.2365, train/hateful_memes/cross_entropy/avg: 0.3752, train/total_loss: 0.2365, train/total_loss/avg: 0.3752, max mem: 11667.0, experiment: run, epoch: 10, num_updates: 2400, iterations: 2400, max_updates: 5000, lr: 0.00001, ups: 1.79, time: 56s 992ms, time_since_start: 23m 31s 925ms, eta: 25m 07s 006ms
[32m2021-12-12T10:17:51 | mmf.trainers.callbacks.logistics: [0mprogress: 2500/5000, train/hateful_memes/cross_entropy: 0.2313, train/hateful_memes/cross_entropy/avg: 0.3668, train/total_loss: 0.2313, train/total_loss/avg: 0.3668, max mem: 11667.0, experiment: run, epoch: 10, num_updates: 2500, iterations: 2500, max_updates: 5000, lr: 0.00001, ups: 1.75, time: 57s 027ms, time_since_start: 24m 28s 952ms, eta: 24m 09s 918ms
[32m2021-12-12T10:18:48 | mmf.trainers.callbacks.logistics: [0mprogress: 2600/5000, train/hateful_memes/cross_entropy: 0.2141, train/hateful_memes/cross_entropy/avg: 0.3577, train/total_loss: 0.2141, train/total_loss/avg: 0.3577, max mem: 11667.0, experiment: run, epoch: 10, num_updates: 2600, iterations: 2600, max_updates: 5000, lr: 0.00001, ups: 1.79, time: 56s 698ms, time_since_start: 25m 25s 651ms, eta: 23m 03s 900ms
[32m2021-12-12T10:19:45 | mmf.trainers.callbacks.logistics: [0mprogress: 2700/5000, train/hateful_memes/cross_entropy: 0.2126, train/hateful_memes/cross_entropy/avg: 0.3450, train/total_loss: 0.2126, train/total_loss/avg: 0.3450, max mem: 11667.0, experiment: run, epoch: 11, num_updates: 2700, iterations: 2700, max_updates: 5000, lr: 0.00001, ups: 1.79, time: 56s 911ms, time_since_start: 26m 22s 563ms, eta: 22m 11s 227ms
[32m2021-12-12T10:20:42 | mmf.trainers.callbacks.logistics: [0mprogress: 2800/5000, train/hateful_memes/cross_entropy: 0.1671, train/hateful_memes/cross_entropy/avg: 0.3334, train/total_loss: 0.1671, train/total_loss/avg: 0.3334, max mem: 11667.0, experiment: run, epoch: 11, num_updates: 2800, iterations: 2800, max_updates: 5000, lr: 0.00001, ups: 1.79, time: 56s 741ms, time_since_start: 27m 19s 305ms, eta: 21m 09s 544ms
[32m2021-12-12T10:21:38 | mmf.trainers.callbacks.logistics: [0mprogress: 2900/5000, train/hateful_memes/cross_entropy: 0.1639, train/hateful_memes/cross_entropy/avg: 0.3221, train/total_loss: 0.1639, train/total_loss/avg: 0.3221, max mem: 11667.0, experiment: run, epoch: 11, num_updates: 2900, iterations: 2900, max_updates: 5000, lr: 0.00001, ups: 1.79, time: 56s 676ms, time_since_start: 28m 15s 981ms, eta: 20m 10s 430ms
[32m2021-12-12T10:22:35 | mmf.trainers.callbacks.checkpoint: [0mCheckpoint time. Saving a checkpoint.
[32m2021-12-12T10:22:35 | mmf.utils.checkpoint: [0mCheckpoint save operation started!
[32m2021-12-12T10:22:40 | mmf.utils.checkpoint: [0mSaving current checkpoint
[32m2021-12-12T10:22:45 | mmf.utils.checkpoint: [0mCheckpoint save operation finished!
[32m2021-12-12T10:22:45 | mmf.trainers.callbacks.logistics: [0mprogress: 3000/5000, train/hateful_memes/cross_entropy: 0.1577, train/hateful_memes/cross_entropy/avg: 0.3119, train/total_loss: 0.1577, train/total_loss/avg: 0.3119, max mem: 11667.0, experiment: run, epoch: 12, num_updates: 3000, iterations: 3000, max_updates: 5000, lr: 0.00001, ups: 1.52, time: 01m 06s 480ms, time_since_start: 29m 22s 462ms, eta: 22m 32s 212ms
[32m2021-12-12T10:22:45 | mmf.trainers.core.training_loop: [0mEvaluation time. Running on full validation set...
[32m2021-12-12T10:22:45 | mmf.common.test_reporter: [0mPredicting for hateful_memes
[32m2021-12-12T10:22:48 | mmf.trainers.core.evaluation_loop: [0mFinished training. Loaded 17
[32m2021-12-12T10:22:48 | mmf.trainers.core.evaluation_loop: [0m -- skipped 0 batches.
[32m2021-12-12T10:22:49 | mmf.utils.checkpoint: [0mCheckpoint save operation started!
[32m2021-12-12T10:22:53 | mmf.utils.checkpoint: [0mSaving current checkpoint
[32m2021-12-12T10:22:57 | mmf.utils.checkpoint: [0mCheckpoint save operation finished!
[32m2021-12-12T10:22:57 | mmf.trainers.callbacks.logistics: [0mprogress: 3000/5000, val/hateful_memes/cross_entropy: 2.1065, val/total_loss: 2.1065, val/hateful_memes/accuracy: 0.6407, val/hateful_memes/binary_f1: 0.2815, val/hateful_memes/roc_auc: 0.6116, num_updates: 3000, epoch: 12, iterations: 3000, max_updates: 5000, val_time: 12s 327ms, best_update: 1000, best_iteration: 1000, best_val/hateful_memes/roc_auc: 0.616868
[32m2021-12-12T10:23:54 | mmf.trainers.callbacks.logistics: [0mprogress: 3100/5000, train/hateful_memes/cross_entropy: 0.1294, train/hateful_memes/cross_entropy/avg: 0.3020, train/total_loss: 0.1294, train/total_loss/avg: 0.3020, max mem: 11667.0, experiment: run, epoch: 12, num_updates: 3100, iterations: 3100, max_updates: 5000, lr: 0.00001, ups: 1.75, time: 57s 006ms, time_since_start: 30m 31s 797ms, eta: 18m 21s 539ms
[32m2021-12-12T10:24:51 | mmf.trainers.callbacks.logistics: [0mprogress: 3200/5000, train/hateful_memes/cross_entropy: 0.1238, train/hateful_memes/cross_entropy/avg: 0.2960, train/total_loss: 0.1238, train/total_loss/avg: 0.2960, max mem: 11667.0, experiment: run, epoch: 13, num_updates: 3200, iterations: 3200, max_updates: 5000, lr: 0.00001, ups: 1.75, time: 57s 003ms, time_since_start: 31m 28s 800ms, eta: 17m 23s 498ms
[32m2021-12-12T10:25:48 | mmf.trainers.callbacks.logistics: [0mprogress: 3300/5000, train/hateful_memes/cross_entropy: 0.1108, train/hateful_memes/cross_entropy/avg: 0.2873, train/total_loss: 0.1108, train/total_loss/avg: 0.2873, max mem: 11667.0, experiment: run, epoch: 13, num_updates: 3300, iterations: 3300, max_updates: 5000, lr: 0.00001, ups: 1.79, time: 56s 894ms, time_since_start: 32m 25s 694ms, eta: 16m 23s 642ms
[32m2021-12-12T10:26:45 | mmf.trainers.callbacks.logistics: [0mprogress: 3400/5000, train/hateful_memes/cross_entropy: 0.1041, train/hateful_memes/cross_entropy/avg: 0.2790, train/total_loss: 0.1041, train/total_loss/avg: 0.2790, max mem: 11667.0, experiment: run, epoch: 13, num_updates: 3400, iterations: 3400, max_updates: 5000, lr: 0.00001, ups: 1.79, time: 56s 632ms, time_since_start: 33m 22s 327ms, eta: 15m 21s 532ms
[32m2021-12-12T10:27:42 | mmf.trainers.callbacks.logistics: [0mprogress: 3500/5000, train/hateful_memes/cross_entropy: 0.0650, train/hateful_memes/cross_entropy/avg: 0.2712, train/total_loss: 0.0650, train/total_loss/avg: 0.2712, max mem: 11667.0, experiment: run, epoch: 14, num_updates: 3500, iterations: 3500, max_updates: 5000, lr: 0.00001, ups: 1.79, time: 56s 946ms, time_since_start: 34m 19s 274ms, eta: 14m 28s 719ms
[32m2021-12-12T10:28:38 | mmf.trainers.callbacks.logistics: [0mprogress: 3600/5000, train/hateful_memes/cross_entropy: 0.0615, train/hateful_memes/cross_entropy/avg: 0.2638, train/total_loss: 0.0615, train/total_loss/avg: 0.2638, max mem: 11667.0, experiment: run, epoch: 14, num_updates: 3600, iterations: 3600, max_updates: 5000, lr: 0., ups: 1.79, time: 56s 724ms, time_since_start: 35m 15s 998ms, eta: 13m 27s 639ms
[32m2021-12-12T10:29:35 | mmf.trainers.callbacks.logistics: [0mprogress: 3700/5000, train/hateful_memes/cross_entropy: 0.0196, train/hateful_memes/cross_entropy/avg: 0.2570, train/total_loss: 0.0196, train/total_loss/avg: 0.2570, max mem: 11667.0, experiment: run, epoch: 14, num_updates: 3700, iterations: 3700, max_updates: 5000, lr: 0., ups: 1.79, time: 56s 697ms, time_since_start: 36m 12s 695ms, eta: 12m 29s 596ms
[32m2021-12-12T10:30:32 | mmf.trainers.callbacks.logistics: [0mprogress: 3800/5000, train/hateful_memes/cross_entropy: 0.0159, train/hateful_memes/cross_entropy/avg: 0.2502, train/total_loss: 0.0159, train/total_loss/avg: 0.2502, max mem: 11667.0, experiment: run, epoch: 15, num_updates: 3800, iterations: 3800, max_updates: 5000, lr: 0., ups: 1.79, time: 56s 769ms, time_since_start: 37m 09s 465ms, eta: 11m 32s 815ms
[32m2021-12-12T10:31:29 | mmf.trainers.callbacks.logistics: [0mprogress: 3900/5000, train/hateful_memes/cross_entropy: 0.0155, train/hateful_memes/cross_entropy/avg: 0.2439, train/total_loss: 0.0155, train/total_loss/avg: 0.2439, max mem: 11667.0, experiment: run, epoch: 15, num_updates: 3900, iterations: 3900, max_updates: 5000, lr: 0., ups: 1.79, time: 56s 683ms, time_since_start: 38m 06s 149ms, eta: 10m 34s 123ms
[32m2021-12-12T10:32:26 | mmf.trainers.callbacks.checkpoint: [0mCheckpoint time. Saving a checkpoint.
[32m2021-12-12T10:32:26 | mmf.utils.checkpoint: [0mCheckpoint save operation started!
[32m2021-12-12T10:32:30 | mmf.utils.checkpoint: [0mSaving current checkpoint
[32m2021-12-12T10:32:35 | mmf.utils.checkpoint: [0mCheckpoint save operation finished!
[32m2021-12-12T10:32:35 | mmf.trainers.callbacks.logistics: [0mprogress: 4000/5000, train/hateful_memes/cross_entropy: 0.0097, train/hateful_memes/cross_entropy/avg: 0.2379, train/total_loss: 0.0097, train/total_loss/avg: 0.2379, max mem: 11667.0, experiment: run, epoch: 16, num_updates: 4000, iterations: 4000, max_updates: 5000, lr: 0., ups: 1.52, time: 01m 06s 648ms, time_since_start: 39m 12s 797ms, eta: 11m 17s 815ms
[32m2021-12-12T10:32:35 | mmf.trainers.core.training_loop: [0mEvaluation time. Running on full validation set...
[32m2021-12-12T10:32:35 | mmf.common.test_reporter: [0mPredicting for hateful_memes
[32m2021-12-12T10:32:39 | mmf.trainers.core.evaluation_loop: [0mFinished training. Loaded 17
[32m2021-12-12T10:32:39 | mmf.trainers.core.evaluation_loop: [0m -- skipped 0 batches.
[32m2021-12-12T10:32:39 | mmf.utils.checkpoint: [0mCheckpoint save operation started!
[32m2021-12-12T10:32:44 | mmf.utils.checkpoint: [0mSaving current checkpoint
[32m2021-12-12T10:32:48 | mmf.utils.checkpoint: [0mCheckpoint save operation finished!
[32m2021-12-12T10:32:48 | mmf.trainers.callbacks.logistics: [0mprogress: 4000/5000, val/hateful_memes/cross_entropy: 2.2917, val/total_loss: 2.2917, val/hateful_memes/accuracy: 0.6426, val/hateful_memes/binary_f1: 0.3713, val/hateful_memes/roc_auc: 0.6131, num_updates: 4000, epoch: 16, iterations: 4000, max_updates: 5000, val_time: 13s 217ms, best_update: 1000, best_iteration: 1000, best_val/hateful_memes/roc_auc: 0.616868
[32m2021-12-12T10:33:46 | mmf.trainers.callbacks.logistics: [0mprogress: 4100/5000, train/hateful_memes/cross_entropy: 0.0097, train/hateful_memes/cross_entropy/avg: 0.2335, train/total_loss: 0.0097, train/total_loss/avg: 0.2335, max mem: 11667.0, experiment: run, epoch: 16, num_updates: 4100, iterations: 4100, max_updates: 5000, lr: 0., ups: 1.75, time: 57s 308ms, time_since_start: 40m 23s 325ms, eta: 08m 44s 541ms
[32m2021-12-12T10:34:42 | mmf.trainers.callbacks.logistics: [0mprogress: 4200/5000, train/hateful_memes/cross_entropy: 0.0092, train/hateful_memes/cross_entropy/avg: 0.2282, train/total_loss: 0.0092, train/total_loss/avg: 0.2282, max mem: 11667.0, experiment: run, epoch: 16, num_updates: 4200, iterations: 4200, max_updates: 5000, lr: 0., ups: 1.79, time: 56s 626ms, time_since_start: 41m 19s 951ms, eta: 07m 40s 713ms
[32m2021-12-12T10:35:39 | mmf.trainers.callbacks.logistics: [0mprogress: 4300/5000, train/hateful_memes/cross_entropy: 0.0068, train/hateful_memes/cross_entropy/avg: 0.2229, train/total_loss: 0.0068, train/total_loss/avg: 0.2229, max mem: 11667.0, experiment: run, epoch: 17, num_updates: 4300, iterations: 4300, max_updates: 5000, lr: 0., ups: 1.79, time: 56s 892ms, time_since_start: 42m 16s 844ms, eta: 06m 45s 015ms
[32m2021-12-12T10:36:36 | mmf.trainers.callbacks.logistics: [0mprogress: 4400/5000, train/hateful_memes/cross_entropy: 0.0066, train/hateful_memes/cross_entropy/avg: 0.2178, train/total_loss: 0.0066, train/total_loss/avg: 0.2178, max mem: 11667.0, experiment: run, epoch: 17, num_updates: 4400, iterations: 4400, max_updates: 5000, lr: 0., ups: 1.79, time: 56s 855ms, time_since_start: 43m 13s 699ms, eta: 05m 46s 931ms
[32m2021-12-12T10:37:33 | mmf.trainers.callbacks.logistics: [0mprogress: 4500/5000, train/hateful_memes/cross_entropy: 0.0063, train/hateful_memes/cross_entropy/avg: 0.2131, train/total_loss: 0.0063, train/total_loss/avg: 0.2131, max mem: 11667.0, experiment: run, epoch: 17, num_updates: 4500, iterations: 4500, max_updates: 5000, lr: 0., ups: 1.79, time: 56s 717ms, time_since_start: 44m 10s 417ms, eta: 04m 48s 408ms
[32m2021-12-12T10:38:30 | mmf.trainers.callbacks.logistics: [0mprogress: 4600/5000, train/hateful_memes/cross_entropy: 0.0062, train/hateful_memes/cross_entropy/avg: 0.2085, train/total_loss: 0.0062, train/total_loss/avg: 0.2085, max mem: 11667.0, experiment: run, epoch: 18, num_updates: 4600, iterations: 4600, max_updates: 5000, lr: 0., ups: 1.79, time: 56s 852ms, time_since_start: 45m 07s 269ms, eta: 03m 51s 277ms
[32m2021-12-12T10:39:26 | mmf.trainers.callbacks.logistics: [0mprogress: 4700/5000, train/hateful_memes/cross_entropy: 0.0061, train/hateful_memes/cross_entropy/avg: 0.2040, train/total_loss: 0.0061, train/total_loss/avg: 0.2040, max mem: 11667.0, experiment: run, epoch: 18, num_updates: 4700, iterations: 4700, max_updates: 5000, lr: 0., ups: 1.79, time: 56s 721ms, time_since_start: 46m 03s 991ms, eta: 02m 53s 058ms
[32m2021-12-12T10:40:23 | mmf.trainers.callbacks.logistics: [0mprogress: 4800/5000, train/hateful_memes/cross_entropy: 0.0051, train/hateful_memes/cross_entropy/avg: 0.1998, train/total_loss: 0.0051, train/total_loss/avg: 0.1998, max mem: 11667.0, experiment: run, epoch: 19, num_updates: 4800, iterations: 4800, max_updates: 5000, lr: 0., ups: 1.79, time: 56s 909ms, time_since_start: 47m 901ms, eta: 01m 55s 753ms
[32m2021-12-12T10:41:20 | mmf.trainers.callbacks.logistics: [0mprogress: 4900/5000, train/hateful_memes/cross_entropy: 0.0049, train/hateful_memes/cross_entropy/avg: 0.1957, train/total_loss: 0.0049, train/total_loss/avg: 0.1957, max mem: 11667.0, experiment: run, epoch: 19, num_updates: 4900, iterations: 4900, max_updates: 5000, lr: 0., ups: 1.79, time: 56s 692ms, time_since_start: 47m 57s 593ms, eta: 57s 655ms
[32m2021-12-12T10:42:17 | mmf.trainers.callbacks.checkpoint: [0mCheckpoint time. Saving a checkpoint.
[32m2021-12-12T10:42:17 | mmf.utils.checkpoint: [0mCheckpoint save operation started!
[32m2021-12-12T10:42:21 | mmf.utils.checkpoint: [0mSaving current checkpoint
[32m2021-12-12T10:42:25 | mmf.utils.checkpoint: [0mCheckpoint save operation finished!
[32m2021-12-12T10:42:25 | mmf.trainers.callbacks.logistics: [0mprogress: 5000/5000, train/hateful_memes/cross_entropy: 0.0026, train/hateful_memes/cross_entropy/avg: 0.1918, train/total_loss: 0.0026, train/total_loss/avg: 0.1918, max mem: 11667.0, experiment: run, epoch: 19, num_updates: 5000, iterations: 5000, max_updates: 5000, lr: 0., ups: 1.54, time: 01m 05s 369ms, time_since_start: 49m 02s 963ms, eta: 0ms
[32m2021-12-12T10:42:25 | mmf.trainers.core.training_loop: [0mEvaluation time. Running on full validation set...
[32m2021-12-12T10:42:25 | mmf.common.test_reporter: [0mPredicting for hateful_memes
[32m2021-12-12T10:42:29 | mmf.trainers.core.evaluation_loop: [0mFinished training. Loaded 17
[32m2021-12-12T10:42:29 | mmf.trainers.core.evaluation_loop: [0m -- skipped 0 batches.
[32m2021-12-12T10:42:29 | mmf.utils.checkpoint: [0mCheckpoint save operation started!
[32m2021-12-12T10:42:34 | mmf.utils.checkpoint: [0mSaving current checkpoint
[32m2021-12-12T10:42:38 | mmf.utils.checkpoint: [0mCheckpoint save operation finished!
[32m2021-12-12T10:42:38 | mmf.trainers.callbacks.logistics: [0mprogress: 5000/5000, val/hateful_memes/cross_entropy: 2.6342, val/total_loss: 2.6342, val/hateful_memes/accuracy: 0.6389, val/hateful_memes/binary_f1: 0.3390, val/hateful_memes/roc_auc: 0.6041, num_updates: 5000, epoch: 19, iterations: 5000, max_updates: 5000, val_time: 13s 046ms, best_update: 1000, best_iteration: 1000, best_val/hateful_memes/roc_auc: 0.616868
[32m2021-12-12T10:42:39 | mmf.trainers.core.training_loop: [0mStepping into final validation check
[32m2021-12-12T10:42:39 | mmf.utils.checkpoint: [0mRestoring checkpoint
[32m2021-12-12T10:42:39 | mmf.utils.checkpoint: [0mLoading checkpoint
[32m2021-12-12T10:42:40 | mmf.utils.checkpoint: [0mCheckpoint loaded.
[32m2021-12-12T10:42:40 | mmf.utils.checkpoint: [0mCurrent num updates: 1000
[32m2021-12-12T10:42:40 | mmf.utils.checkpoint: [0mCurrent iteration: 1000
[32m2021-12-12T10:42:40 | mmf.utils.checkpoint: [0mCurrent epoch: 4
[32m2021-12-12T10:42:42 | mmf.trainers.mmf_trainer: [0mStarting inference on test set
[32m2021-12-12T10:42:42 | mmf.common.test_reporter: [0mPredicting for hateful_memes
[32m2021-12-12T10:42:53 | mmf.trainers.core.evaluation_loop: [0mFinished training. Loaded 63
[32m2021-12-12T10:42:53 | mmf.trainers.core.evaluation_loop: [0m -- skipped 0 batches.
[32m2021-12-12T10:42:53 | mmf.trainers.callbacks.logistics: [0mprogress: 1000/5000, test/hateful_memes/cross_entropy: 0.6901, test/total_loss: 0.6901, test/hateful_memes/accuracy: 0.6380, test/hateful_memes/binary_f1: 0.4017, test/hateful_memes/roc_auc: 0.6233
[32m2021-12-12T10:42:53 | mmf.trainers.callbacks.logistics: [0mFinished run in 49m 30s 594ms
